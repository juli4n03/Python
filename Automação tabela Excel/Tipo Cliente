{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fa9e163d",
   "metadata": {},
   "source": [
    "<h1>Pacotes necessários</h1>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "4e3a0feb",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import openpyxl\n",
    "from openpyxl.styles import PatternFill, Font, Alignment, numbers\n",
    "from openpyxl.styles.borders import Border, Side\n",
    "from openpyxl.formatting.rule import ColorScaleRule\n",
    "from openpyxl import load_workbook"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1dba7f4",
   "metadata": {},
   "source": [
    "<h1> Carregando todos os arquivos </h1>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "74aac57d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['cComum_Aprovacao_022023.xlsx', 'Comum_Aprovacao_022023.xlsx', 'Comum_Aprovacao_032023.xlsx', 'Diamante_Aprovacao_022023.xlsx', 'Diamante_Aprovacao_032023.xlsx', 'Geral_Aprovacao_022023.xlsx', 'Geral_Aprovacao_032023.xlsx']\n"
     ]
    }
   ],
   "source": [
    "path = r'C:\\Users\\JulianoCesardaSilva\\Downloads\\Eletrosom\\Taxas de Aprovação\\Por tipo cliente\\Arquivos R'\n",
    "\n",
    "tableNames = os.listdir(path)[1:]\n",
    "print(tableNames)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "de785534",
   "metadata": {},
   "source": [
    "<h1> Definindo cor de letra, tamanho, cor de fundo, formato negrito</h1>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "49176bf1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Titulo região cinza\n",
    "cell_bg_color = PatternFill(start_color='A6A6A6', end_color='A6A6A6', fill_type='solid')\n",
    "cell_font = Font(color='FFFFFF', bold=True, size=16)\n",
    "\n",
    "# Cabeçario e Total\n",
    "cell_bg_color2 = PatternFill(start_color='002060', end_color='002060', fill_type='solid')\n",
    "cell_font2 = Font(color='FFFFFF', bold=True, size=11)\n",
    "\n",
    "# Título cliente laranja\n",
    "cell_bg_color3 = PatternFill(start_color='FFC000', end_color='FFC000', fill_type='solid')\n",
    "cell_font3 = Font(color='000000', bold=True, size=11)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c2717887",
   "metadata": {},
   "source": [
    "<h1> Funções </h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e9d64442",
   "metadata": {},
   "source": [
    "<h4> Bordas externas espessas </h4>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "3cd842f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "def apply_thick_borders(sheet, cell_range):\n",
    "    thick_border = Side(style='thick')\n",
    "\n",
    "    start_cell = sheet[cell_range.split(':')[0]]\n",
    "    end_cell = sheet[cell_range.split(':')[1]]\n",
    "    \n",
    "    start_row, end_row = start_cell.row, end_cell.row\n",
    "    start_col, end_col = start_cell.column, end_cell.column\n",
    "\n",
    "    for row in range(start_row, end_row + 1):\n",
    "        for col in range(start_col, end_col + 1):\n",
    "            cell = sheet.cell(row=row, column=col)\n",
    "            if row == start_row:\n",
    "                cell.border += Border(top=thick_border)\n",
    "            if row == end_row:\n",
    "                cell.border += Border(bottom=thick_border)\n",
    "            if col == start_col:\n",
    "                cell.border += Border(left=thick_border)\n",
    "            if col == end_col:\n",
    "                cell.border += Border(right=thick_border)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed940b98",
   "metadata": {},
   "source": [
    "<h4> Bordas Internas </h4>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9271d2c5",
   "metadata": {},
   "outputs": [],
   "source": [
    "def apply_internal_borders(sheet, cell_range):\n",
    "    thin_border = Side(style='thin')\n",
    "\n",
    "    start_cell = sheet[cell_range.split(':')[0]]\n",
    "    end_cell = sheet[cell_range.split(':')[1]]\n",
    "    \n",
    "    start_row, end_row = start_cell.row, end_cell.row\n",
    "    start_col, end_col = start_cell.column, end_cell.column\n",
    "\n",
    "    for row in range(start_row, end_row + 1):\n",
    "        for col in range(start_col, end_col + 1):\n",
    "            cell = sheet.cell(row=row, column=col)\n",
    "            if row > start_row:\n",
    "                cell.border += Border(top=thin_border)\n",
    "            if row < end_row:\n",
    "                cell.border += Border(bottom=thin_border)\n",
    "            if col > start_col:\n",
    "                cell.border += Border(left=thin_border)\n",
    "            if col < end_col:\n",
    "                cell.border += Border(right=thin_border) "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c8b7a5dc",
   "metadata": {},
   "source": [
    "<h4> Mesclar e Centralizar </h4>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "67636079",
   "metadata": {},
   "outputs": [],
   "source": [
    "def merge_and_center(sheet, cell_range, text):\n",
    "    sheet.merge_cells(cell_range)\n",
    "    start_cell = sheet[cell_range.split(':')[0]]\n",
    "    start_cell.value = text\n",
    "    start_cell.alignment = Alignment(horizontal='center', vertical='center')\n",
    "    start_cell.font = Font(bold=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0d7292b4",
   "metadata": {},
   "source": [
    "<h4> Extrair o mês do nome do arquivo </h4>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "95ada3f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_custom_text(file_name):\n",
    "    month_number = int(file_name.split('_')[-1][:2])\n",
    "    month_names = {\n",
    "        1: \"jan/23\",\n",
    "        2: \"fev/23\",\n",
    "        3: \"mar/23\",\n",
    "        4: \"abr/23\",\n",
    "        5: \"mai/23\",\n",
    "        6: \"jun/23\",\n",
    "        7: \"jul/23\",\n",
    "        8: \"ago/23\",\n",
    "        9: \"set/23\",\n",
    "        10: \"out/23\",\n",
    "        11: \"nov/23\",\n",
    "        12: \"dez/23\"\n",
    "    }\n",
    "    return month_names.get(month_number, \"Mês não encontrado\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "da1e1643",
   "metadata": {},
   "source": [
    "<h1> Formatações </h1>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "9982fde2",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "\"There is no item named 'xl/drawings/drawing1.xml' in the archive\"",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-20-94874dadedc4>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      3\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      4\u001b[0m     \u001b[1;31m# Carregar o arquivo Excel\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 5\u001b[1;33m     \u001b[0mworkbook\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mopenpyxl\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mload_workbook\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mfile_path\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      6\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      7\u001b[0m     \u001b[1;31m#Nome das abas\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\openpyxl\\reader\\excel.py\u001b[0m in \u001b[0;36mload_workbook\u001b[1;34m(filename, read_only, keep_vba, data_only, keep_links)\u001b[0m\n\u001b[0;32m    315\u001b[0m     reader = ExcelReader(filename, read_only, keep_vba,\n\u001b[0;32m    316\u001b[0m                         data_only, keep_links)\n\u001b[1;32m--> 317\u001b[1;33m     \u001b[0mreader\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mread\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    318\u001b[0m     \u001b[1;32mreturn\u001b[0m \u001b[0mreader\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwb\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\openpyxl\\reader\\excel.py\u001b[0m in \u001b[0;36mread\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    280\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mread_theme\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    281\u001b[0m         \u001b[0mapply_stylesheet\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0marchive\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwb\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 282\u001b[1;33m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mread_worksheets\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    283\u001b[0m         \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mparser\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0massign_names\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    284\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[1;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mread_only\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\openpyxl\\reader\\excel.py\u001b[0m in \u001b[0;36mread_worksheets\u001b[1;34m(self)\u001b[0m\n\u001b[0;32m    255\u001b[0m             \u001b[0mdrawings\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mrels\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mfind\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mSpreadsheetDrawing\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0m_rel_type\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    256\u001b[0m             \u001b[1;32mfor\u001b[0m \u001b[0mrel\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mdrawings\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m--> 257\u001b[1;33m                 \u001b[0mcharts\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mimages\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mfind_images\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0marchive\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mrel\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mtarget\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m    258\u001b[0m                 \u001b[1;32mfor\u001b[0m \u001b[0mc\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mcharts\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m    259\u001b[0m                     \u001b[0mws\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0madd_chart\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mc\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mc\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0manchor\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\site-packages\\openpyxl\\reader\\drawings.py\u001b[0m in \u001b[0;36mfind_images\u001b[1;34m(archive, path)\u001b[0m\n\u001b[0;32m     22\u001b[0m     \"\"\"\n\u001b[0;32m     23\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 24\u001b[1;33m     \u001b[0msrc\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0marchive\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mread\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     25\u001b[0m     \u001b[0mtree\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mfromstring\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0msrc\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     26\u001b[0m     \u001b[1;32mtry\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\zipfile.py\u001b[0m in \u001b[0;36mread\u001b[1;34m(self, name, pwd)\u001b[0m\n\u001b[0;32m   1473\u001b[0m     \u001b[1;32mdef\u001b[0m \u001b[0mread\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mself\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mname\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mpwd\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mNone\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1474\u001b[0m         \u001b[1;34m\"\"\"Return file bytes for name.\"\"\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1475\u001b[1;33m         \u001b[1;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m,\u001b[0m \u001b[1;34m\"r\"\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mpwd\u001b[0m\u001b[1;33m)\u001b[0m \u001b[1;32mas\u001b[0m \u001b[0mfp\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1476\u001b[0m             \u001b[1;32mreturn\u001b[0m \u001b[0mfp\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mread\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1477\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\zipfile.py\u001b[0m in \u001b[0;36mopen\u001b[1;34m(self, name, mode, pwd, force_zip64)\u001b[0m\n\u001b[0;32m   1512\u001b[0m         \u001b[1;32melse\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1513\u001b[0m             \u001b[1;31m# Get info object for name\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1514\u001b[1;33m             \u001b[0mzinfo\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mgetinfo\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m   1515\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1516\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0mmode\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;34m'w'\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;32mC:\\ProgramData\\Anaconda3\\lib\\zipfile.py\u001b[0m in \u001b[0;36mgetinfo\u001b[1;34m(self, name)\u001b[0m\n\u001b[0;32m   1439\u001b[0m         \u001b[0minfo\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mself\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mNameToInfo\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mget\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mname\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m   1440\u001b[0m         \u001b[1;32mif\u001b[0m \u001b[0minfo\u001b[0m \u001b[1;32mis\u001b[0m \u001b[1;32mNone\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m-> 1441\u001b[1;33m             raise KeyError(\n\u001b[0m\u001b[0;32m   1442\u001b[0m                 'There is no item named %r in the archive' % name)\n\u001b[0;32m   1443\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: \"There is no item named 'xl/drawings/drawing1.xml' in the archive\""
     ]
    }
   ],
   "source": [
    "for tb in tableNames:\n",
    "    file_path = os.path.join(path, tb)\n",
    "    \n",
    "    # Carregar o arquivo Excel\n",
    "    workbook = openpyxl.load_workbook(file_path)\n",
    "        \n",
    "    #Nome das abas\n",
    "    sheet_names = []\n",
    "\n",
    "    for sheet_name in workbook.sheetnames:\n",
    "        sheet_names.append(sheet_name)\n",
    "        \n",
    "    # loop pelas abas\n",
    "    for sheet_name in sheet_names:\n",
    "        # seleciona a aba\n",
    "        sheet = workbook[sheet_name]\n",
    "\n",
    "################################################ Mesclar e centralizar #########################################################                  \n",
    "        cell_mescla = [\"B1:I1\", \"B16:I16\", \"B31:I31\", \"B46:I46\"]\n",
    "        custom_text = get_custom_text(tb)\n",
    "        for cell_range in cell_mescla:\n",
    "            merge_and_center(sheet, cell_range, custom_text)\n",
    "            \n",
    "############################################### Bordas externas espessas #######################################################\n",
    "        cell_ranges = ['B1:I14', 'B16:I29', 'B31:I44', 'B46:I59']\n",
    "        for cell_range in cell_ranges:\n",
    "            apply_thick_borders(sheet, cell_range)\n",
    "            \n",
    "##################################################### Bordas Internas ##########################################################\n",
    "        cell_ranges = ['B3:I14', 'B18:I29', 'B33:I44', 'B48:I59']\n",
    "        for cell_range in cell_ranges:\n",
    "            apply_internal_borders(sheet, cell_range)\n",
    "        \n",
    "####################################################### Título #################################################################\n",
    "        cells_to_style = [1, 16, 31, 46]\n",
    "        for cell_num in cells_to_style:\n",
    "            cell = sheet.cell(row=cell_num, column=1)\n",
    "            cell.fill = cell_bg_color3\n",
    "            cell.font = cell_font3\n",
    "\n",
    "################################################### Cabeçario e Total ##########################################################\n",
    "            cells_to_style2 = [2, 14, 17, 29, 32, 44, 47, 59]\n",
    "        for row_num in cells_to_style2:\n",
    "            for col_num in range(1, 10):\n",
    "                cell = sheet.cell(row=row_num, column=col_num)\n",
    "                cell.fill = cell_bg_color2\n",
    "                cell.font = cell_font2\n",
    "\n",
    "############################################## Formatando em Porcentagem #######################################################\n",
    "        columns_to_format = [4,6,8,9]\n",
    "        for column in columns_to_format:\n",
    "            for row in sheet.iter_rows(min_row=1, max_row=sheet.max_row, min_col=column, max_col=column):\n",
    "                cell = row[0]\n",
    "                cell.number_format = numbers.FORMAT_PERCENTAGE_00\n",
    "\n",
    "############################################## Formatando em Número Inteiro ####################################################     \n",
    "        colunas_para_formatar = [2, 3, 5, 7]  \n",
    "        for coluna in colunas_para_formatar:\n",
    "            for linha in range(1, sheet.max_row + 1):\n",
    "                sheet.cell(row=linha, column=coluna).number_format = '#,##0'\n",
    "\n",
    "############################################## Formatação Condicional ##########################################################\n",
    "        cell_ranges = [\"H3:I13\", \"H18:I28\", \"H33:I43\", \"H48:I58\"]\n",
    "        color_scale_rule = ColorScaleRule(\n",
    "            start_type=\"min\", start_color= \"63BE7B\",  # Verde\n",
    "            mid_type=\"percentile\", mid_value=50, mid_color= \"FFEB84\",  # Amarelo\n",
    "            end_type=\"max\", end_color= \"F8696B\")  # Vermelho\n",
    "        for cell_range in cell_ranges:\n",
    "            sheet.conditional_formatting.add(cell_range, color_scale_rule)\n",
    "\n",
    "############################################## Salvando arquivo ################################################################\n",
    "        workbook.save(r'C:\\Users\\JulianoCesardaSilva\\Downloads\\Eletrosom\\Taxas de Aprovação\\Por tipo cliente\\Arquivos R\\-Editado\\\\' + tb)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e7fdd8ad",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
